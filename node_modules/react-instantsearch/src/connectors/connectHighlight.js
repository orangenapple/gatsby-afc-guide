'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createConnector = require('../core/createConnector');

var _createConnector2 = _interopRequireDefault(_createConnector);

var _highlight = require('../core/highlight');

var _highlight2 = _interopRequireDefault(_highlight);

var _highlightTags = require('../core/highlightTags.js');

var _highlightTags2 = _interopRequireDefault(_highlightTags);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var highlight = function highlight(_ref) {
  var attribute = _ref.attribute,
      hit = _ref.hit,
      highlightProperty = _ref.highlightProperty;
  return (0, _highlight2.default)({
    attribute: attribute,
    hit: hit,
    preTag: _highlightTags2.default.highlightPreTag,
    postTag: _highlightTags2.default.highlightPostTag,
    highlightProperty: highlightProperty
  });
};

/**
 * connectHighlight connector provides the logic to create an highlighter
 * component that will retrieve, parse and render an highlighted attribute
 * from an Algolia hit.
 * @name connectHighlight
 * @kind connector
 * @category connector
 * @providedPropType {function} highlight - function to retrieve and parse an attribute from a hit. It takes a configuration object with 3 attributes: `highlightProperty` which is the property that contains the highlight structure from the records, `attribute` which is the name of the attribute (it can be either a string or an array of strings) to look for and `hit` which is the hit from Algolia. It returns an array of objects `{value: string, isHighlighted: boolean}`. If the element that corresponds to the attribute is an array of strings, it will return a nested array of objects.
 * @example
 * import React from 'react';
 * import { InstantSearch, SearchBox, Hits } from 'react-instantsearch/dom';
 * import { connectHighlight } from 'react-instantsearch/connectors';
 *
 * const CustomHighlight = connectHighlight(
 *   ({ highlight, attribute, hit, highlightProperty }) => {
 *     const highlights = highlight({
 *       highlightProperty: '_highlightResult',
 *       attribute,
 *       hit
 *     });
 *
 *     return highlights.map(part => part.isHighlighted ? (
 *       <mark>{part.value}</mark>
 *     ) : (
 *       <span>{part.value}</span>
 *     ));
 *   }
 * );
 *
 * const Hit = ({ hit }) => (
 *   <p>
 *     <CustomHighlight attribute="name" hit={hit} />
 *   </p>
 * );
 *
 * const App = () => (
 *   <InstantSearch
 *     appId="latency"
 *     apiKey="6be0576ff61c053d5f9a3225e2a90f76"
 *     indexName="ikea"
 *   >
 *     <SearchBox defaultRefinement="legi" />
 *     <Hits hitComponent={Hit} />
 *   </InstantSearch>
 * );
 */
exports.default = (0, _createConnector2.default)({
  displayName: 'AlgoliaHighlighter',

  propTypes: {},

  getProvidedProps: function getProvidedProps() {
    return { highlight: highlight };
  }
});